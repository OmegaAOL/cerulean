<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/ABg9/wEYjf8DGJ7/BRee/wcXnv8JF57/Cxee/w4Wnv8Q
        Fp7/Exae/xYVnv8ZFZ7/GxWe/x8Unv8iFJ7/JRSe/ygTnv8sE57/LxKe/zMSnv83Ep7/OhGe/z4Rhv9C
        EC4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAYbMICE/9zAwz/YgQK/2IECv9iBQr/YgYK/2IH
        Cv9iCAr/YgkK/2IKCf9iCwn/YgwJ/2INCf9iDwn/YhAI/2IRCP9iEwj/YhQI/2IVCP9iFwj/YhgI/2Ia
        B/96IQn/0TsN//9MD1wAAAAAAAAAAAAAAAAAAAAAAAAAAP8BGI/VAxT/LQMG/wMDA/8DAwP/AwMD/wMD
        A/8DAwP/AwMD/wMDA/8DAwP/AwMD/wMDA/8DAwP/AwMD/wMDA/8DAwP/AwMD/wMDA/8DAwP/AwMD/wMD
        A/8DAwP/AwMD/wMDA/88FAb/6UsN//9WDnUAAAAAAAAAAAAAAAD/AhgL9AQX/wwFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUF
        Bf8FBQX/BQUF/wUFBf8FBQX/BQUF/wUFBf8lEAb/4VEM//9gDR8AAAAAAAAAAP8FF2yWBxH/CAgI/wgI
        CP8ICAj/CAgI/wgICP8ICAj/CAgI/wgICP8HBwf/BwcH/wcHB/8ICAj/CAgI/wgICP8ICAj/CAgI/wcH
        B/8HBwf/BwcH/wgICP8ICAj/CAgI/wgICP8ICAj/CAgI/wgICP97Mgr//2YMiAAAAAAAAAAA/wgXp18K
        Dv8KCgr/CgoK/woKCv8KCgr/CgoK/woKCv8UFBL/YVo8/3FiK/9GPyT/CAgI/wkJCf8KCgr/CgoK/woK
        Cv9OSjr/c2Ux/1lOJP8UExD/CQkJ/wkJCf8KCgr/CgoK/woKCv8KCgr/CgoK/2ArC///bAulAAAAAAAA
        AAD/CxehZg0Q/w0NDf8NDQ3/DQ0N/w0NDf8NDQ3/Ojgu/9bHn//jw4X/3KtU/8aRIP9uXyr/CwsL/wwM
        DP8MDAz/enJV/+bQoP/gtWj/0Jcs/62DFP81MB3/CwsL/wwMDP8NDQ3/DQ0N/w0NDf8NDQ3/aDIM//9y
        C58AAAAAAAAAAP8PFp9qERL/EBAQ/xAQEP8QEBD/EBAQ/y4rIP/avX//6cGF/+u6e//uwor/676B/86c
        Pv9BOyn/Dg4O/zQuGv/VrV//6rx9/+y+gf/tw4v/4qxe/8GOJP8xLSD/Dg4O/w8PD/8QEBD/EBAQ/xAQ
        EP9rNg7//3gKngAAAAAAAAAA/xMWn2wUFP8TExP/ExMT/xMTE/8VFRP/qIQt/+OsZP/mpFj/5aBR/+ak
        V//tvof/6Ll9/6uNSv8QEBD/lXQl/+CkVP/lolT/5aBR/+eoX//uwo//5bFu/7qXSf8WFhX/EhIS/xMT
        E/8TExP/ExMT/207EP//fgmeAAAAAAAAAAD/GBWfbhgW/xYWFv8WFhb/FhYW/yYhEv+8dwb/5Z9W/+Wb
        UP/lm1D/5ZtQ/+elYv/vxJf/4LBx/3VnUP/Vm0v/5Z9W/+WbUP/lm1D/5ZtQ/+ejX//vwpX/48WU/0E+
        Nv8VFRX/FhYW/xYWFv8WFhb/bz4R//+ECJ4AAAAAAAAAAP8cFZ9wGxf/GRkZ/xkZGf8ZGRn/HRsX/4RV
        Av/VdRf/45FH/+WVUf/llVH/5ZdU/+uve//wyaT/6biI/+OeXf/ll1T/5ZVR/+WVUf/llVH/4o9F/96T
        SP/TsHT/JiQg/xgYGP8ZGRn/GRkZ/xkZGf9wQhP//4oIngAAAAAAAAAA/yEUn3EfGf8cHBz/HBwc/xwc
        HP8cHBz/JCAV/25FBf/JZAP/3oA2/+SPTv/lkFH/5pZa/+ieaP/nmV//5pNW/+WQUf/lkFH/441M/9+B
        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
        Hv9iQCL/REND/0RERP9FRUX/ln4n///KAJAAAAAAAAAAAP9yCxPxcg//R0dH/0dHR/9HR0f/R0dH/0dH
        R/9HR0f/R0dH/0dHR/9HR0f/R0dH/0dHR/9HR0f/R0dH/0dHR/9HR0f/R0dH/0dHR/9HR0f/R0dH/0dH
        R/9HR0f/R0dH/0dHR/9HR0f/R0dH/1BOQ//ftAz//8wALAAAAAAAAAAAAAAAAP98CZbNcRr/U0xE/0hI
        SP9ISEj/SEhI/0hISP9ISEj/SEhI/0hISP9ISEj/SEhI/0hISP9ISEj/SEhI/0hISP9ISEj/SEhI/0hI
        SP9ISEj/SEhI/0hISP9ISEj/SEhI/0hISP9eV0D/4LYM///MAIkAAAAAAAAAAAAAAAAAAAAAAAAAAP+G
        CIbngRH/pmwo/49lMf+PZzD/j2gw/49qMP+PazD/j2ww/49tL/+Pby//j3Av/49xL/+Pci//j3Mv/490
        L/+PdS//j3Yv/493Lv+PeC7/j3ku/496Lv+Pei7/rZEh//DBBv//zAB4AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP+QByL/lAd+/5cGnv+bBp7/ngWe/6IFnv+lBZ7/qQSe/6wEnv+vA57/sgOe/7UDnv+4
        Ap7/uwKe/70Cnv/AAZ7/wgGe/8QBnv/HAZ7/yQCe/8oAnv/MAJ7/zABz/8wAFQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////AAAA/gAAAHwAAAA4AAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABwAAAA+AAAAfwAAAP//////////8=
</value>
  </data>
</root>